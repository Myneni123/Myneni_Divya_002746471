/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UIPackage;

import healthcare.Doctor;
import healthcare.Hospital;
import healthcare.System1;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mynenidivya
 */
public class DoctorPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorPanel
     */
    private System1 System;
    private Hospital hospital;
    private JPanel displayJPanel;
    public DoctorPanel(JPanel displayJPanel,Hospital hospital) {
        this.hospital=hospital;
        this.displayJPanel=displayJPanel;
        initComponents();
        populateTable();
        java.lang.System.out.println("Inside DoctorPanel");
    }
    private void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) doctorsJTable.getModel();
        model.setRowCount(0);
        
        for(Doctor doctor:hospital.getDoctors()){
            Object[] row = new Object[2];
            row[0]=doctor;
            row[1]=doctor.getSpecialization();
            
            
            model.addRow(row);
        }
    }
    
    String regxName = "^[a-zA-Z\\s]+$";
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updateJButton = new javax.swing.JButton();
        personsJLabel = new javax.swing.JLabel();
        deleteJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorsJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        addJButton = new javax.swing.JButton();
        lblpersonname = new javax.swing.JLabel();
        lblage = new javax.swing.JLabel();
        txtdoctorname = new javax.swing.JTextField();
        txtspecialization = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 204, 204));

        updateJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UIPackage/edit.png"))); // NOI18N
        updateJButton.setText("Update");
        updateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJButtonActionPerformed(evt);
            }
        });

        personsJLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        personsJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        personsJLabel.setText("Doctors");

        deleteJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UIPackage/delete.png"))); // NOI18N
        deleteJButton.setText("Delete");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        doctorsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Doctor Name", "Specialization"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doctorsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorsJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(doctorsJTable);

        backJButton.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        backJButton.setText("previous");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        addJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UIPackage/Save.png"))); // NOI18N
        addJButton.setText("Add");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        lblpersonname.setText("Doctor Name : ");

        lblage.setText("Specialization");

        txtdoctorname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdoctornameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(personsJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(185, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblpersonname)
                            .addGap(18, 18, 18)
                            .addComponent(txtdoctorname, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(67, 67, 67)
                            .addComponent(lblage)
                            .addGap(18, 18, 18)
                            .addComponent(txtspecialization, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addComponent(updateJButton)
                            .addGap(31, 31, 31)
                            .addComponent(deleteJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(personsJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtdoctorname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblpersonname, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtspecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblage, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addJButton)
                    .addComponent(updateJButton)
                    .addComponent(deleteJButton))
                .addContainerGap(87, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJButtonActionPerformed
        int selectedRowIndex = doctorsJTable.getSelectedRow();
        if (selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to update");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) doctorsJTable.getModel();
       Doctor doctor = (Doctor) model.getValueAt(selectedRowIndex, 0);

        if (doctor.getName().equals(txtdoctorname.getText()) && doctor.getSpecialization().equals(txtspecialization.getText())){
            JOptionPane.showMessageDialog(this, "No new values entered\nPlease enter a new details of the doctor");
            return;
        }else if (txtdoctorname.getText().equals("") || txtspecialization.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Hospital Name is blank\nPlease enter a valid doctor name");
            return;
        }
        else{
            if (txtdoctorname.getText().matches(regxName) && txtspecialization.getText().matches(regxName)){
                doctor.setName(txtdoctorname.getText());
                doctor.setSpecialization(txtspecialization.getText());
                
                JOptionPane.showMessageDialog(this, "Doctor updated successfully");
                populateTable();
                txtdoctorname.setText("");
                txtspecialization.setText("");
                
            }else{
                JOptionPane.showMessageDialog(this, "Enter valid details\nOnly alphabets and spaces allowed for Doctor Name and Specialization");
         
            }
        
        }
    }//GEN-LAST:event_updateJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        int selectedRowIndex = doctorsJTable.getSelectedRow();
        if (selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) doctorsJTable.getModel();
        Doctor doctor = (Doctor) model.getValueAt(selectedRowIndex, 0);

        hospital.getDoctors().remove(doctor);

        txtdoctorname.setText("");
        txtspecialization.setText("");
        

        JOptionPane.showMessageDialog(this, "Person deleted successfully");
        populateTable();
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void doctorsJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorsJTableMouseClicked
        int selectedRowIndex = doctorsJTable.getSelectedRow();
        if (selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to update");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) doctorsJTable.getModel();
        Doctor doctor = (Doctor) model.getValueAt(selectedRowIndex, 0);

        txtdoctorname.setText(doctor.getName());
        txtspecialization.setText(doctor.getSpecialization());
        
    }//GEN-LAST:event_doctorsJTableMouseClicked

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        displayJPanel.remove(this);
        CardLayout cardLayout =  (CardLayout) displayJPanel.getLayout();
        cardLayout.previous(displayJPanel);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        if (txtdoctorname.getText().isBlank() && txtspecialization.getText().isBlank()){
            JOptionPane.showMessageDialog(this, "Please enter valid details");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) doctorsJTable.getModel();

        for(Doctor doctor:hospital.getDoctors()){
            if (txtdoctorname.getText().equals(doctor.getName())){
                JOptionPane.showMessageDialog(this, "Doctor name already exists\nPlease enter a different doctor name");
                return;
            }
        }
        
        if (txtdoctorname.getText().matches(regxName) && txtspecialization.getText().matches(regxName)){
            

            Doctor doctor= new Doctor(txtdoctorname.getText(),txtspecialization.getText());
            hospital.getDoctors().add(doctor);
            populateTable();

            txtdoctorname.setText("");
            txtspecialization.setText("");
            
        }else{
            JOptionPane.showMessageDialog(this, "Please enter valid details");
        }
    }//GEN-LAST:event_addJButtonActionPerformed

    private void txtdoctornameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdoctornameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtdoctornameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JTable doctorsJTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblage;
    private javax.swing.JLabel lblpersonname;
    private javax.swing.JLabel personsJLabel;
    private javax.swing.JTextField txtdoctorname;
    private javax.swing.JTextField txtspecialization;
    private javax.swing.JButton updateJButton;
    // End of variables declaration//GEN-END:variables
}
